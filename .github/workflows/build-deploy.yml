name: Build and Deploy Code
# run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push, pull_request]
jobs:
  Build:
    environment:
      name: testing
    env: 
      DTB_HOSTNAME: ${{ secrets.DTB_HOSTNAME }}
      DTB_PORT: ${{ secrets.DATABASE_PORT }}
      DTB_PWD: ${{ secrets.DTB_PWD }}
      DTB_NAME: ${{ secrets.DTB_NAME }}
      DTB_USERNAME: ${{ secrets.DTB_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
    
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DTB_PWD }}
          POSTGRES_DB: ${{ secrets.DTB_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest

    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: install python 
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test using pytest
        run: |
          pip install pytest
          pytest


      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ vars.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: ${{ vars.DOCKER_USERNAME }}/fastapipostgres:latest


      # - run: echo "üçè This job's status is ${{ job.status }}."

  Deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deployment
        uses: sws2apps/render-deployment@main #consider using pin for dependabot auto update
        with:
          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
          apiKey: ${{ secrets.RENDER_API_KEY }}
          multipleDeployment: false #optional, default true
